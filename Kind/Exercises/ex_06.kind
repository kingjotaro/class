// Integers
type Inte { 
  neg(num: Neg)
  pos(num: Pos)
}

// Positive Numbers
type Pos { 
  zero
  succ(pred: Pos)
}

// Negative Numbers
type Neg { 
  one
  pred(succ: Neg)
}

// example
// -0 does not exist
// Increments a negative number by one
neg_succ(n: Neg): Neg
  case n { 
    one:  Neg.one
    pred: n.succ
  }

// Functions for negative numbers to help testing 
// Do not edit those functions

// Converts Neg to Nat
neg_to_nat(n: Neg): Nat
  case n { 
    one:  Nat.succ(Nat.zero)
    pred: Nat.succ(neg_to_nat(n.succ))
  }
  
// Converts Nat to Neg
nat_to_neg(n: Nat): Neg
  neg_succ(nat_to_neg_aux(n))
  
  // Aux function for Nat.to_neg
nat_to_neg_aux(n: Nat): Neg
  case n {
    zero: Neg.one
    succ: Neg.pred(nat_to_neg_aux(n.pred))
  }

// Converts Pos to Nat
pos_to_nat(n: Pos): Nat
  case n { 
    zero:  Nat.zero
    succ:  Nat.succ(pos_to_nat(n.pred))
  }

// Converts Nat to Pos
nat_to_pos(n: Nat): Pos
  case n { 
    zero: Pos.zero
    succ: Pos.succ(nat_to_pos(n.pred))
  }

// Converts Pos to String
pos_show(n: Pos): String
  "+"|Nat.show(pos_to_nat(n))

// Converts Neg to String
neg_show(n: Neg): String
  "-"|Nat.show(neg_to_nat(n))

// Convertss Int to String
inte_show(n: Inte): String
  case n {
    neg: neg_show(n.num) 
    pos: pos_show(n.num) 
  }

// Creates an int sign
// true  = Positive 
// false = Negative
int(sign: Bool, num: Nat): Inte
  case sign {
    true: Inte.pos(nat_to_pos(num))
    false:
      case num {
        zero: Inte.pos(Pos.zero)
        succ: Inte.neg(nat_to_neg(num))
      }
  }


// Exercises:

// Increments an Integer
// int(false, 1)     = +0
// int(false, 2)     = -1
// int(true,  2)     = +3
inc(a: Inte): Inte  
  case a {
    neg: case a.num {
           one: Inte.pos(Pos.zero)
           pred:Inte.neg(a.num.succ)
            }
    pos: Inte.pos(Pos.succ(a.num))
    }


 
//inte: Inte
// inc(Inte.pos(Pos.succ(Pos.zero)))

// Decrements an Integer
// int(false, 1) = -2
// int(true,  2) = +1
// int(true,  0) = -1
dec(a: Inte): Inte
  case a {
    neg: Inte.neg(Neg.pred(a.num))
    pos: case a.num {
           zero: Inte.neg(Neg.one)
           succ: Inte.pos(a.num.pred)
         }  

  }


//inte: Inte
//  dec(Inte.neg(Neg.one))

// Doubles an Integer
// int(false, 4) = -8
// int(false, 1) = -2
// int(true,  2) = +4
dbl(a: Inte): Inte 
  case a { 
    neg: case a.num { 
           one: Inte.neg(Neg.pred(Neg.one))
            pred:Inte.neg(Neg.pred(Neg.pred(intneg(dbl(Inte.neg(a.num.succ))))))
           }
    pos: case a.num {
           zero: Inte.pos(Pos.zero)
           succ: Inte.pos(Pos.succ(Pos.succ(intpos(dbl(Inte.pos(a.num.pred))))))
         }
  }


//inte: Inte
// dbl(Inte.neg(Neg.pred(Neg.one)))




intpos(a: Inte): Pos 
  case a { 
    neg: Pos.zero
    pos: a.num 
    }

intneg(a: Inte): Neg 
  case a { 
    neg: a.num
    pos: Neg.one 
    }


// Adds two Integers
// int(false, 4) + int(false, 2) = -6
// int(false, 4) + int(true,  2) = -2
add(a: Inte, b: Inte): Inte
  case a { 
    neg: case b {
           neg: case a.num b.num {
                one one: Inte.neg(Neg.pred(Neg.one))
                one pred: Inte.neg(Neg.pred(b.num))
                pred one: Inte.neg(Neg.pred(a.num))
                pred pred:Inte.neg(Neg.pred(Neg.pred(intneg(add(Inte.neg(a.num.succ),Inte.neg(b.num.succ))))))
                 
                
                }  
           pos: case b.num {
                  zero: Inte.neg(a.num)
                  succ: case a.num {
                          one: Inte.pos(b.num.pred)
                          pred:add(Inte.neg(a.num.succ),Inte.pos(b.num.pred))
                        }
                }
        }  
                         
    pos: case b {
           neg: case a.num {
                  zero: b
                  succ: case b.num {
                          one: Inte.pos(a.num.pred)
                          pred:add(Inte.pos(a.num.pred),Inte.neg(b.num.succ))
                          }
                }         
           pos: case a.num {
                  zero: b
                  succ: Inte.pos(Pos.succ(intpos(add(Inte.pos(a.num.pred),(Inte.pos(b.num))))))
                }
        }

  }
 
//inte:_
 //inte_show(add(Inte.pos(Pos.succ(Pos.succ(Pos.zero))),Inte.neg(Neg.one)))


// Multiplies two numbers
// int(false, 2) * int(true, 3)  = -6
// int(false, 4) * int(false, 5) = +20
mul(a: Inte, b: Inte): Inte
  case a { 
    neg: case b { 
           neg: case b.num {
                  one: Inte.pos(wololo(a.num))
                  pred: case a.num {
                         one: Inte.pos(wololo(b.num))
                         pred: add(b, mul(Inte.neg(a.num.succ),Inte.neg(b.num))) 
                        }
                }

           pos: case b.num {
                 zero: b
                 succ: case a.num {
                         one: Inte.neg(aioo(b.num))
                         pred: add(b, mul(Inte.neg(a.num.succ),Inte.pos(b.num)))
                       }
                }              
         }  

    pos: case b{ 
           neg: case a.num{
                  zero: a             
                  succ: case b.num { 
                          one: Inte.neg(aioo(a.num)) 
                          pred:add(b, mul(Inte.neg(b.num.succ),Inte.pos(a.num.pred)))
                        }
                }

           pos: case b.num { 
                  zero: b
                  succ: case a.num{ 
                          zero: a
                          succ: add(b, mul(Inte.pos(a.num.pred), Inte.pos(b.num)))
                        }
                }          
         }
  }
inte:_
  inte_show(mul(Inte.pos(Pos.succ(Pos.succ(Pos.zero))), (Inte.pos(Pos.succ(Pos.zero)))))

wololo(a: Neg): Pos
  case a {
   one: Pos.succ(Pos.zero)
   pred:Pos.succ(wololo(a.succ))
  }

aioo(a: Pos): Neg
 
 case Pos.succ(a){
   zero: Neg.one 
   succ: case a { 
           zero: Neg.one
           succ: Neg.pred(aioo(a.pred))
         }   
}

  
// Subtracts two Interger numbers
// int(false, 6) - int(false, 6) = +0
// int(false, 4) - int(false, 6) = +2
sub(a: Inte, b: Inte): Inte
  case a {
    neg: case b {
           neg: case a.num b.num {
                 one one: Inte.pos(Pos.zero)
                 one pred:Inte.neg(b.num.succ)
                 pred one:Inte.neg(a.num.succ)
                 pred pred: sub(Inte.neg(a.num.succ),(Inte.neg(b.num.succ)))
                } 
         

           pos:add(a,b)
         }  
    pos: case b{
           neg:add(a,(Inte.pos(wololo(intneg(a)))))

           pos: case a.num b.num { 
                  zero zero: Inte.pos(Pos.zero)
                  zero succ: Inte.neg(Neg.pred(aioo(intpos(sub(a,Inte.pos(b.num.pred))))))
                  succ zero: a
                  succ succ: Inte.pos(intpos(sub(Inte.pos(a.num.pred),(Inte.pos(b.num.pred)))))

                }  
         }  
  }  

//inte:_ 
//inte_show(sub(Inte.pos(Pos.succ(Pos.zero)),(Inte.neg(Neg.one))))

// Equal
eql(a: Inte, b: Inte): Bool // Given 2 numbers, it returns true if the 2 are the same and false if they are different.
  case a b { 
    neg neg: case a.num b.num{ 
               one one:  true 
               pred pred: eql(Inte.neg(a.num.succ),Inte.neg(b.num.succ))
             } default false 
             
    pos pos: case a.num b.num { 
               zero zero: true
               succ succ: eql(Inte.pos(a.num.pred),Inte.pos(b.num.pred))
               } default false     
  } default false 

//inte: Bool 
// eql(Inte.neg(Neg.pred(Neg.one)), Inte.neg(Neg.pred(Neg.one)))

// Greater than
// int(false, 2) > int(false, 5) = True
// int(false, 5) > int(false, 1) = False
// int(false, 2) > int(true,  0) = False
// int(true,  0) > int(false, 2) = True
gtn(a: Inte, b: Inte): Bool // if A > B == True else false
   case a b {
     neg neg: case a.num b.num {
                pred one: true 
                pred pred: gtn(Inte.neg(a.num.succ), Inte.neg(b.num.succ))
              } default false
     neg pos: false
     pos neg: true
     pos pos: case a.num b.num { 
               zero zero: true
               succ succ: gtn(Inte.pos(a.num.pred),Inte.pos(b.num.pred))
              } default false 
   }

//inte: Bool 
// gtn(Inte.neg(Neg.pred(Neg.one)), Inte.neg(Neg.one))

// Lower than
// int(false, 1) < int(true,  0) = True
// int(true,  0) < int(false, 1) = False
ltn(a: Inte, b: Inte): Bool // if A > B == False else true
  case a b { 
    neg neg: case a.num b.num{
               pred one: true 
               pred pred: ltn(Inte.neg(a.num.succ), Inte.neg(b.num.succ))
               } default false 

    neg pos: true
    pos neg: false
    pos pos: case a.num b.num { 
               zero succ: true 
               succ succ: ltn(Inte.pos(a.num.pred), Inte.pos(b.num.pred))
             } default false 
             
  } 
//inte: Bool 
// ltn(Inte.neg(Neg.one), Inte.neg(Neg.pred(Neg.one)))
  
// Minimum
// min(int(false, 1), int(true,  0)  = -1
// min(int(false, 1), int(false, 3)) = -3
min(a: Inte, b: Inte): Inte // if A < B then A else B
  case a b { 
    neg neg: case a.num b.num{
               one one:  Inte.neg(a.num)
               one pred: Inte.neg(a.num)
               pred one: Inte.neg(b.num)
               pred pred: Inte.neg(Neg.pred(intneg(min(Inte.neg(a.num.succ),Inte.neg(b.num.succ)))))
              }
              
    neg pos: a 
    pos neg: b
    pos pos: case a.num b.num { 
               zero zero: Inte.pos(a.num)
               zero succ: Inte.pos(a.num)
               succ zero: Inte.pos(b.num)
               succ succ: Inte.pos(Pos.succ(intpos(min(Inte.pos(a.num.pred), Inte.pos(b.num.pred)))))
             }
  }
// Maximum
// max(int(false, 1), int(true,  0)) = +0
// max(int(false, 1), int(false, 3)) = -1
max(a: Inte, b: Inte): Inte // if A > B then A else B
  case a b{ 
   neg neg:  case a.num b.num { 
               one one: Inte.neg(a.num)
               one pred:Inte.neg(a.num) 
               pred one:Inte.neg(b.num)
               pred pred:Inte.neg(Neg.pred(intneg(max(Inte.neg(a.num.succ), Inte.neg(b.num.succ)))))
             }

   neg pos: b 
   pos neg: a
   pos pos: case a.num b.num { 
              zero zero: Inte.pos(Pos.zero)
              zero succ: Inte.pos(a.num)
              succ zero: Inte.pos(b.num) 
              succ succ: Inte.pos(Pos.succ(intpos(max(Inte.pos(a.num.pred), Inte.pos(b.num.pred)))))
            }  
}             

//inte:_ 
//  inte_show(max(Inte.neg(Neg.one), Inte.pos(Pos.zero)))

// Half
// Divides a number by two
// int(false, 4) = -2
// int(false, 1) = +0
// int(true,  6) = +3
hlf(a: Inte): Inte
  case a {
  neg: case a.num {
         one: Inte.pos(Pos.zero)
         pred: dec(hlf(inc(inc(a))))
       }  
  pos: case a.num {
        zero: Inte.pos(Pos.zero)
        succ: inc(hlf(dec(dec(a))))
       }
  }
 
   
// inte:_ 
//  inte_show(hlf(Inte.neg(Neg.one)))

// Division
// int(true,  2)  / int(true,  2)  = +1
// int(false, 8)  / int(true,  4)  = -2
// int(false, 11) / int(false, 5)  = +2
// int(true,  10) / int(false, 12) = +0
//div(a: Inte, b: Inte c: Inte ): Inte 
  //case: a b {
    //neg neg: case a.num b.num {
               //one one: Inte.pos(Pos.succ(Pos.zero))
               //one pred: Inte.pos(Pos.zero)
               //pred one: divaux(a,b,inc(c))
               //pred pred: 
            //} 
    //neg pos:
    //pos neg:
    //pos pos:
  //} 




divaux(a: Inte b: Inte c: Inte) Inte
  case a b { 
    neg neg: case (wololo(a.num )){ 
               zero: ?e
               succ: ?t
               }
    neg pos:?a
    pos neg:?b
    pos pos:?c
  }  
