
//Char and String

// Charactere Type
// Alias for U16
Char: Type
  U16


//Syntax Sugar for U16
  //0#16, 1#16, 2#16 ...


//Syntax Sugar for Char
  //'0', '1', '2' ... 

//Ascii Table from Wikipedia:
// https://upload.wikimedia.org/wikipedia/commons/1/1b/ASCII-Table-wide.svg

//  _________________________________________
// | U16 Syntax Sugar   | Char Syntax Sugar  |  
// |--------------------|--------------------|
// |     72#16          |      'H'           |
// |    101#16          |      'e'           |
// |    121#16          |      'y'           |
//  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

//Verifies if the character is Upper Case

//is_upper('a') -> Bool.false
//is_upper('A') -> Bool.true
//is_upper('0') -> Bool.false
is_upper(x: Char): Bool
  case U16.lte(x, 90) { 
    true: case U16.lte(x, 64){
            true: false
            false: true
          }
    false: false
  }
//string:_
// is_upper('a')

//Verifies if the character is Lower Case

//is_lower('a') -> Bool.true
//is_lower('A') -> Bool.false
//is_lower('0') -> Bool.false
is_lower(x: Char): Bool
  case U16.lte(x, 122){
    true: case U16.lte(x, 96){
            true: false
            false: true
          }  
    false: false
  }
//string:_ 
//  is_lower('Z')

//Verifies if the character is a Number-Digit Value

//is_digit('a') -> Bool.false
//is_digit('A') -> Bool.false
//is_digit('0') -> Bool.true
is_digit(x: Char): Bool
  case U16.lte(x, 57){
   true: case U16.lte(x, 47){
           true: false
           false: true
         }
   false: false
  } 
//string:_
// is_digit(':')



//Verifies if both of the Characters are the same

//is_equal('a', 'A') -> Bool.false
//is_equal('A', '0') -> Bool.false
//is_equal('0', '0') -> Bool.true
equal(x: Char, y: Char): Bool
  case U16.eql(x, y){ 
    true: true
    false: false
   }

//string:_
//  equal('a', 'a') 

//Transforms Characters into Nat digits

//to_digit('0') -> Nat.zero
//to_digit('1') -> Nat.succ(Nat.zero)
//to_digit('4') -> 4
to_digit(x: Char): Nat
  case U16.lte(x, 57){
    true: case U16.lte(x, 48){
           true: Nat.zero
           false: Nat.succ(to_digit(U16.sub(x, 1)))
                  
         } 
    false: 404
  }  
   
//string:_ 
//  to_digit('1')
  


//Transforms all Characters into Lower Case Characters

//to_lower('A') -> 'a'
//to_lower('B') -> 'b'
//to_lower('Z') -> 'z'
to_lower(x: Char): Char
  case U16.lte(x, 64) {
    true: x
    false: case U16.lte(x, 90) { 
             true: U16.add(x, 32)
             false: x
           }  
  }
//string:_
//Char.to_string(to_upper('a'))


//Transforms all Characters into Upper Case Characters

//to_upper('a') -> 'A' 
//to_upper('b') -> 'B'
//to_upper('z') -> 'Z'
to_upper(x: Char): Char
  case U16.lte(x, 96) {
    true: x
    false: case U16.lte(x, 122) { 
             true: U16.sub(x, 32)
             false: x
           }  
  }





//String Type
type String { 
  nil,
  cons(head: Char, tail: String)
}

//Without Syntax Sugar for String
//a = String.cons('H', String.cons('I', String.nil))
//b = String.cons('H', String.cons('e', String.cons('l', String.cons('l', String.cons('o', String.nil)))))
//c = String.cons('t', String.cons('e', String.cons('x', String.cons('t', String.nil))))

//Syntax Sugar for String
//a = "HI"
//b = "Hello"
//c = "text"



//Concatenates two Strings into one

//concat(a,b) -> "HiHello"
//concat(b,c) -> "Hellotext"
concat(xs: String, ys: String): String
  case xs {
    nil: ys
    cons: String.cons(xs.head, concat(xs.tail, ys))
}
//string:_
//  concat("O", "I")



//Applies a Function to all Characters of the String

//map(to_lower, a) -> "hi"
map(fn: Char -> Char, xs: String): String
  case xs { 
    nil: ""
    cons: String.cons(fn(xs.head), map(fn,xs.tail))
}

//string:_ 
//  map(to_lower,("OLa")) 


//Converts all Lower Case Caracters in a String to Upper Case

//string_to_upper(c) -> "TEXT"
string_to_upper(xs: String): String
  case xs { 
    nil: "" 
    cons: String.cons(to_upper(xs.head), string_to_upper(xs.tail))
  }

//string:_ 
//Char.hex_value16('1')

//Convers the String into bits

//to_bits(a) -> "0000000001001001 0000000001001000"
//to_bits(b) -> "0000000001101111 0000000001101100 00000000011011000 000000001100101 0000000001001000"
//to_bits(c) -> "0000000001110100 0000000001111000 00000000011001010 000000001110100"
to_bits(xs: String): Bits
 case xs { 
   nil: Bits.e 
   cons: Bits.concat(U16.to_bits(xs.head), to_bits(xs.tail))

 }

 
// string:_
//   to_bits("aa") 

//Verifies if two Strings are Equal

//stringequal(a, a) -> Bool.true
//stringequal(a, b) -> Bool.false
//stringequal(b, c) -> Bool.false
stringequal(xs: String, ys: String): Bool
  case xs ys { 
    nil nil:  true
    cons cons: case U16.eql(xs.head, ys.head) {
                   true: stringequal(xs.tail, ys.tail)
                   false: false
               }    
  } default false  

//string:_ 
// stringequal("rafael", "rafael")

//Verifies if All String elements are Numbers

//is_nat(a)      -> Bool.false
//is_nat(b)      -> Bool.false
//is_nat("1234") -> Bool.true
is_nat(xs: String): Bool
  case xs { 
    nil: false 
    cons: case xs.tail {  
            nil: case is_digit(xs.head) {
                   true: true 
                   false:false
                 }  
            cons: case is_digit(xs.head){
                    true:  is_nat(xs.tail)
                    false: false
                  }
          }
  }

//string:_
//  is_nat("1231151")


// Divides the elements of a String into a list, using a match you decide

//split(b, "l") -> ["He","" , "o"
//split(c, "e") -> ["t", "xt"]
split(xs: String, match: String): List<String>
   ?a
   



stringa(xs: String m: String acum: String): List<String>
 case xs m { 
    nil nil:  [acum]
    nil cons: [acum]
    cons nil: [xs]
    cons cons: case U16.eql(xs.head, m.head){
               true:  case sodeuspodemejulgar(xs, m, String.length(m)){
                        true: List.cons!(String.concat(" ", acum), stringa(drop(String.length(m), xs), m, acum))
                        false: List.cons!(String.concat(" ", acum). stringa(xs.tail, m, acum))
               false: List.cons!(String.cons(xs.head, acum), string(xs.tail, m, acum))
                      } 
             }
 }            

sodeuspodemejulgar(a: String b: String n: Nat): Bool 
  case a n { 
    nil  zero: true
    cons zero: true
     nil succ: false
    cons succ: case b{ 
                 nil: false
                 cons: case U16.eql(a.head, b.head) {
                         false: false
                         true: sodeuspodemejulgar(a.tail, b.tail, n.pred) 
               } }
   }
   
  





// Takes any elements while the condition is matched.

//take_while(is_upper,    a) -> ""   abacaC
//take_while(is_lower,    b) -> "b"
//take_while(is_equal('t'), c) -> ""
take_while(cond: Char -> Bool, xs: String): String
  case xs { 
    nil: ""
    cons: case cond(xs.head) {
            true: String.cons(xs.head, take_while(cond, xs.tail))
            false: "" 
          }  
  }  


//string:_
//    take_while(is_lower, ("afaefaA"))

//Finds the index of the head for the first occurence if any of the Characters are equal

//find(a, "H") -> 0
//find(b, "l") -> 2
//find(c, "x") -> 2
find(xs: String, x: Char): Nat
   case xs  { 
   nil:  40404040404040404040  
   cons: case U16.eql(xs.head, x) {
               true: 0
               false: Nat.succ(find(xs.tail, x))
              } 
   }              

//string:_ 
//  find("123415159", '4')

//Filters the String and discards all the Chars that doesn't satisfy given condition 

//filter(is_upper,      a) -> "HI"
//filter(is_lower,      b) -> "ello"
//filter(is_equal('t'), c) -> "tt"
filter(cond: Char -> Bool, xs: String): String
  case xs { 
    nil: ""
    cons: case cond(xs.head) {
            true: String.cons(xs.head, filter(cond,xs.tail))
            false: filter(cond,xs.tail)
          }
   } 

//string:_ 
//  filter(is_lower, ("o"))

//Concatenates all elements of a List of Strings

//flatten([a,b,c]) -> "HIHellotext"
flatten(lxs: List<String>): String
   case lxs {
    nil: "" 
    cons: String.concat(lxs.head, flatten(lxs.tail))
    }

//Drops a n Number of characteres from a String

//drop(1, a) -> "I"
//drop(2, b) -> "llo"
//drop(3, c) -> "t"
drop(n: Nat, xs: String): String
   case n xs { 
    zero nil: ""
    zero cons: xs
    succ nil: ""
    succ cons: drop(n.pred, xs.tail)
  }



//Takes n elements of a String

//take(1, a) ->  "H"
//take(2, b) ->  "He"
//take(3, c) ->  "tex"
take(n: Nat xs: String): String
   case n xs { 
      zero nil: ""
      zero cons: ""
      succ nil:  ""
      succ cons: String.cons(xs.head, take(n.pred, xs.tail ))
   }  



//Takes a x part of the string after a n Index of values get dropped

//slice(1, 2, a) -> "I"
//slice(2, 4, b) -> "ll"
//slice(1, 3, c) -> "ex"
slice(n: Nat, x: Nat, xs: String): String
  case xs  { 
    nil: ""
   cons: case n x  { 
          zero zero: ""
          zero succ: xs 
          succ zero: ""
          succ succ: String.concat(take(x,(drop(n, xs)))"")
         } 
  } 
 

//string:_ 
//  slice(0, 6, "rafael")
 
