//Bits

//File for exercises in Bits

//e = empty
//o = 0
//i = 1
type Bits { 
  e
  o(pred: Bits)
  i(pred: Bits)
}

//a = Bits.i(Bits.i(Bits.e))
//b = Bits.o(Bits.i(Bits.i(Bits.e)))
//c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
//d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))


//Verifies if it is an Empty Bit

//is_empty(a)      -> Bool.false
//is_empty(b)      -> Bool.false
//is_empty(c)      -> Bool.false
//is_empty(d)      -> Bool.false
//is_empty(Bits.e) -> Bool.true
is_empty(b: Bits): Bool
  case b {
   e: true
   o: false
   i: false
}

//bita:_ 
//    is_empty(Bits.read("01"))

//Gets the Tail of a Bits structure

//tail(a) -> Bits.i(Bits.e)
//tail(b) -> Bits.i(Bits.i(Bits.e))
//tail(c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//tail(d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
tail(b: Bits): Bits
  case b {
    e: Bits.e
    o: b.pred
    i: b.pred
  }
//bita:_ 
//  tail(Bits.read("001"))

//Negates all Bits

//notb(a) -> Bits.o(Bits.o(Bits.e))
//notb(b) -> Bits.i(Bits.o(Bits.o(Bits.e)))
//notb(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//notb(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.e))))
notb(b: Bits): Bits
  case b { 
    e: Bits.e
    o: Bits.i(notb(b.pred))
    i: Bits.o(notb(b.pred))
  }

// bita:_ 
//  notb(Bits.read("001"))


//Increments a Bit

//inc(a) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//inc(b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//inc(c) -> Bits.i(Bits.o(Bits.i(Bits.i(Bits.e))))
//inc(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.i(Bits.e)))))
inc(b: Bits): Bits
   case b { 
     e: Bits.i(Bits.e)
     o: Bits.i(b.pred)
     i: Bits.o(inc(b.pred))
   }
//bita:_ 
// inc(Bits.read("1"))

//Decrements a Bit

//dec(a) -> Bits.o(Bits.i(Bits.e))
//dec(b) -> Bits.i(Bits.o(Bits.i(Bits.e)))
//dec(c) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.e))))
//dec(d) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))

isallzeroaux(b: Bits a:Bool): Bool 
  case b { 
    e: a 
    o: isallzeroaux(b.pred, true)
    i: false

}

isallzero(b: Bits): Bool
  isallzeroaux(b, false) 
   

dec(b: Bits): Bits
  let allzero = isallzero(b)
   if allzero then 
    Bits.e 
   else
   
  case b { 
     e: Bits.e
     o: case  Bits.eql(b, Bits.o(Bits.e)) { 
          false: Bits.i(dec(b.pred))
          true:  Bits.e
        }  
     i: Bits.o(b.pred)
   }

//bita:_ 
//dec(Bits.read("0000"))



//Concatenate two Bits structures

//concat(a,b) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)
//concat(b,c) -> Bits.o(Bits.i(Bits.i(Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))))))
//concat(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))))))
concat(a: Bits, b: Bits): Bits
  case a { 
    e: b         
    o: Bits.o(concat(a.pred,b))
    i: Bits.i(concat(a.pred,b))
  }
  
//bita:_
// concat(Bits.read("001"), Bits.read("001"))
//Adds two Bits structures

//add(a,b) -> Bits.i(Bits.o(Bits.o(Bits.i(Bits.e))))
//add(b,c) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.o(Bits.e))))))
//add(c,d) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)))))
add(a: Bits, b: Bits): Bits 
  case b { 
    e: a
    o: case a { 
         e: b
         o: Bits.o(add(a.pred, b.pred))
         i: Bits.i(add(a.pred, b.pred))
       }
       
    i:  case a { 
          e: b
          o: Bits.i(add(a.pred , b.pred))
          i: add(inc(a), dec(b))
        }       
 
  }


 
 

//bita:_ 

 //let a = Nat.to_bits(5) 
 //let b = Nat.to_bits(33)
 //Bits.to_nat(add(a, b))
 

bitmen(a: Bits, b: Bits): Bool
  case a b { 
   o e: false  
   i e: false
   e e: false   
   e i: true
   e o: true 
  } default bitmen(dec(a),dec(b))

//bita:_
//  bitmen(Bits.read("01"), Bits.read("11"))

//Returns Bits.i if only both bits are Bits.i

//and(a,b) -> Bits.o(Bits.i(Bits.e))
//and(b,c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//and(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
 

and(a: Bits, b: Bits): Bits
  case a b { 
    e e: Bits.e
    e o: Bits.e 
    e i: Bits.e 
    o e: Bits.o(and(a.pred, b))
    o o: Bits.o(and(a.pred, b.pred))
    o i: Bits.o(and(a.pred, b.pred))
    i e: Bits.e 
    i o: Bits.o(and(a.pred, b.pred))
    i i: Bits.i(and(a.pred, b.pred))
}

//bita:_
 

//and(Bits.read("0011"), Bits.read("1111"))
 
 
 
//a = Bits.i(Bits.i(Bits.e))
//b = Bits.o(Bits.i(Bits.i(Bits.e)))
//c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
//d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))


//Returns Bits.i if any of bits are Bits.i

//or(a,b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//or(b,c) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
//or(c,d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
or(a: Bits, b: Bits): Bits
  case a b { 
   e e: Bits.e
   e o: b
   e i: b
   o e: a
   o o: Bits.o(or(a.pred, b.pred))
   o i: Bits.i(or(a.pred, b.pred))
   i e: a
   i o: Bits.i(or(a.pred, b.pred))
   i i: Bits.i(or(a.pred, b.pred))
  }
//bita:_ 
 //let a = Bits.read("11")
 //let b=  Bits.read("011")
 //let c=  Bits.read("0011")
 //let d=  Bits.read("1111")
 //or(c,d)
  
//Verifies if both Bit structures are equal

//eql(a,b) -> Bool.false
//eql(b,c) -> Bool.false
//eql(d,d) -> Bool.true
eql(a: Bits, b: Bits): Bool
  
  case a b {
   e e: true
   o o: eql(dec(a), dec(b))
   o i: eql(dec(a), dec(b))
   i o: eql(dec(a), dec(b))
   i i: eql(dec(a), dec(b))
  } default false

//bita:_ 
 //let a = Bits.read("11")
 //let b=  Bits.read("011")
 //let c=  Bits.read("0011")
 //let d=  Bits.read("1111")

 //eql(b,c) 
//Reverses a Bits structure

reverse_go(b: Bits, acum: Bits): Bits
  case b { 
   e: acum
   o: reverse_go(b.pred, Bits.o(acum)) 
   i: reverse_go(b.pred, Bits.i(acum))
  }
  
//bita:_ 
//reverse_go(Bits.read("0111111111"), Bits.e)

//reverse(a) -> Bits.i(Bits.i(Bits.e))
//reverse(b) -> Bits.i(Bits.i(Bits.o(Bits.e)))
//reverse(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//reverse(d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
//reverse(b: Bits): Bits
//  reverse_go(b, Bits.e)




//Gets the length of the Bits structure

length_go(bs: Bits, acum: Nat): Nat
  case bs { 
   e: acum
   o: Nat.succ(length_go(bs.pred, acum))
   i: Nat.succ(length_go(bs.pred, acum))
}
// bita:_ 
//  length_go(Bits.read(""), 0)



//length(a) -> Nat.succ(Nat.succ(Nat.zero))
//length(b) -> Nat.succ(Nat.succ(Nat.succ(Nat.zero)))
//length(c) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
//length(d) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
length(bs: Bits): Nat
  length_go(bs, 0)



//Multiplies two Bits structures

mul2(a: Bits, b: Bits, acum: Bits): Bits
   case a { 
    e: acum 
    o: mul2(a.pred, Bits.o(b), acum)
    i: mul2(a.pred, Bits.o(b), add(b,acum))
     
       }


//mul(a,b) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//mul(b,c) -> Bits.o(Bits.o(Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))))
mul(a: Bits, b: Bits): Bits
  mul2(a, b, Bits.e)


//bita:_
  //mul(Bits.read("001"), Bits.read("00001")) 
//Drops a n Number of Bits starting from from the least significative bit

//drop(1, a) -> Bits.i(Bits.e)
//drop(1, b) -> Bits.i(Bits.i(Bits.e))
//drop(1, c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//drop(1, d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
drop(n: Nat, bs: Bits): Bits
   case n { 
     zero: bs 
     succ: case bs {
            e: Bits.e
             }default drop(n.pred, bs.pred) 

   } 
  


//Takes n Bits from the structure, starting from the least significative bit

//take(1, a) -> Bits.i(Bits.e)
//take(2, b) -> Bits.o(Bits.i(Bits.e))
//take(3, c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//take(4, d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
take(n: Nat, bs: Bits): Bits
   case n{ 
    zero: Bits.e
    succ:  case bs { 
             e: Bits.e
             o: Bits.o(take(n.pred, bs.pred)) 
             i: Bits.i(take(n.pred, bs.pred))
           }
   }   

//bita:_  
// take(5, Bits.read("01010101"))

  

div(a: Bits b: Bits c: Bits d: Bits): Bits
  case a { 
    e: d
    o: case dec(a){
         e: d 
       } default case b {
             e: divaux(a, b, c, inc(d))
             o: case dec(b) {
                  e: divaux(a, b, c, inc(d))
                } default div((a.pred), b.pred, inc(c), d)    
             i: div(dec(a), dec(b), inc(c), d)             
         }  
    i:  case dec(a) { 
          e: d
} default  case b { 
            e: divaux(a, b, c, inc(d)) 
            o: case dec(b){ 
                 e: divaux(a, b, c, inc(d))
               } default div((a.pred), b.pred, inc(c), d)  
            i: div(dec(a), dec(b), inc(c), d)
       }
  } 

divaux(a: Bits b: Bits c: Bits d: Bits): Bits
  case a { 
    e: d
    o: case dec(a){ 
         e: d
       } default case c{
            e: div(a, b, c, inc(d))
            o: case dec(c) {
                 e: div(a, b, c, inc(d))
               } default divaux((a.pred), inc(b), c.pred, d)
            i: divaux(dec(a), inc(b), dec(b) d)
                 }
    i:  case dec(a) { 
          e: d
} default case c { 
            e:div(a, b, c, inc(d))
            o: case dec(c){ 
            e: div(a, b, c, inc(d))
               } default divaux((a.pred), inc(b), c.pred, d)
            i:divaux(dec(a), inc(b), dec(c), d)
        } 

   }


divvai(a: Bits b: Bits): Bits
 div(a, b, Bits.e, Bits.e)



bita:_
  divvai(Bits.read("0001"), Bits.read("01")) 
 
